from typing import Optional

from pydantic import PrivateAttr


class CacheHandler:
    """Callback handler for tool usage."""

    _cache: PrivateAttr = {}

    def __init__(self):
        self._cache = {}

    def add(self, tool, input, output):
        """
        Add the output of a tool with the given input to the cache.

        Args:
            tool (str): The name of the tool.
            input (str): The input for the tool.
            output: The output generated by the tool.

        Raises:
            (Exception): If any error occurs while adding to the cache.

        Returns:
            None
        """


        input = input.strip()
        self._cache[f"{tool}-{input}"] = output

    def read(self, tool, input) -> Optional[str]:
        """
        Read the cached data for the specified tool and input.

        Args:
            tool: The tool for which the cached data is being read.
            input: The input for which the cached data is being read.

        Returns:
            Optional[str]: The cached data for the specified tool and input, or None if not found.

        Raises:
            None
        """

        
        input = input.strip()
        return self._cache.get(f"{tool}-{input}")
